import React, { useEffect, useState, useRef } from 'react';
import { PivotViewComponent, FieldList, Inject } from '@syncfusion/ej2-react-pivotview';
import { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';
import { enableRipple } from '@syncfusion/ej2-base';
import './App.css';

enableRipple(true);

const App = () => {
    const [pivotData, setPivotData] = useState([]);
    const [selectedDimensions, setSelectedDimensions] = useState<string[]>([]);
    const [currentUrl, setCurrentUrl] = useState<string>('');

    // Create refs for each CheckBoxComponent
    const timeRef = useRef<CheckBoxComponent>(null);
    const productsRef = useRef<CheckBoxComponent>(null);
    const storeRef = useRef<CheckBoxComponent>(null);
    const customerRef = useRef<CheckBoxComponent>(null);
    const locationRef = useRef<CheckBoxComponent>(null);
    const RESTART = useRef<CheckBoxComponent>(null);
    useEffect(() => {
        // Construct the endpoint based on selected dimensions
        const dimensionsStr = selectedDimensions.join('-');
        const apiUrl = `http://localhost:3001/${dimensionsStr ? dimensionsStr : 'location'}`;

        setCurrentUrl(apiUrl);

        fetch(apiUrl)
            .then(response => response.json())
            .then(data => setPivotData(data))
            .catch(error => console.error('Error fetching data:', error));
    }, [selectedDimensions]);

    const updateDimensions = (dimensions: string[]): string[] => {
        return dimensions.sort((a, b) => a.localeCompare(b));
    };

    const handleCheckboxChange = () => {
        const updatedDimensions: string[] = [];

        const refs: { [key: string]: React.RefObject<CheckBoxComponent> } = {
            time: timeRef,
            products: productsRef,
            location: locationRef,
            store: storeRef,
            customer: customerRef,
            RESTART:RESTART
        };

        Object.keys(refs).forEach(dim => {
            if (refs[dim].current?.checked) {
                updatedDimensions.push(dim);
            }
        });

        setSelectedDimensions(updateDimensions(updatedDimensions));
    };

    return (
        <div className="App">
            <div className="checkbox-container">
                <CheckBoxComponent
                    label="Time"
                    ref={timeRef}
                    onChange={handleCheckboxChange}
                    checked={selectedDimensions.includes('time')}
                />
                <CheckBoxComponent
                    label="Location"
                    ref={locationRef}
                    onChange={handleCheckboxChange}
                    checked={selectedDimensions.includes('location')}
                />
                <CheckBoxComponent
                    label="Store"
                    ref={storeRef}
                    onChange={handleCheckboxChange}
                    checked={selectedDimensions.includes('store')}
                />
                <CheckBoxComponent
                    label="Customer"
                    ref={customerRef}
                    onChange={handleCheckboxChange}
                    checked={selectedDimensions.includes('customer')}
                />
                <CheckBoxComponent
                    label="Products"
                    ref={productsRef}
                    onChange={handleCheckboxChange}
                    checked={selectedDimensions.includes('products')}
                />
                <CheckBoxComponent
                    label="RESTART"
                    ref={RESTART}
                    onChange={handleCheckboxChange}
                    checked={selectedDimensions.includes('RESTART')}
                />
            </div>
            <div className="current-url">
                <strong>Current URL: </strong><span>{currentUrl}</span>
            </div>
            <PivotViewComponent
                dataSourceSettings={{
                    dataSource: pivotData,
                    values: [
                        { name: "Sold", caption: "Units Sold" },
                        { name: "Amount", caption: "Sold Amount" },
                    ],
                    rows: selectedDimensions.includes('products') ? [{ name: "Products" }] : [],
                    columns: selectedDimensions.filter(dim => dim !== 'products').map(dim => ({ name: dim.charAt(0).toUpperCase() + dim.slice(1) })),
                    calculatedFieldSettings: [{ name: "Total", formula: '"Sum(Amount)"+"Sum(Sold)"' }],
                }}
                showFieldList={true}
                allowCalculatedField={true}
                height={'500px'}
                width={'1500px'}
            >
                <Inject services={[FieldList]} />
            </PivotViewComponent>
        </div>
    );
}

export default App;
